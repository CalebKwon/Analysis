install.packages("ggplot2")
library(ggplot2)

#######################################################################################
data(mpg)
names(mpg)

# displ - a car’s engine size in litres, and
# hwy - a car’s fuel efficiency on the highway in miles per gallon (mpg). 
#  A car with a low fuel efficiency consumes more fuel than a car with a high fuel efficiency when they travel the same distance.

### 실습을 위해서 ###
# medical data에서 BMI에 따라 3등급으로 나눈 변수를 만든다. 변수 이름은 BMI1
# medical data에서 age에 따라 3등급으로 나눈 변수를 만든다. 변수 이름은 age1

# The plot shows a negative relationship between engine size (displ) and fuel efficiency (hwy).
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))

# class variable to reveal the class of each car.
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))

#class to the size aesthetic in the same way.
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = class))
  
#  alpha aesthetic, which controls the transparency of the points
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, alpha = class))

# class to the shape of the points.
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
  
# points in our plot blue.
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
  
# 
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))

# 
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))

#
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))

#
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping= aes(x = displ, y = hwy))

# 
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth()

# 
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth(data = subset(mpg, cyl == 8))

# solving overlapping issue, jitter
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), position = "jitter") + 
  ggtitle('Position = "jitter"')
 
# 	2.	Will these two graphs look different?

ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()

ggplot(mapping = aes(x = displ, y = hwy)) + 
  geom_point(data = mpg) + 
  geom_smooth(data = mpg)

# 
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_wrap(~ class)

#
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)

#
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
 # facet_grid(cyl ~ .)
   facet_grid(. ~ cyl)


# data(diamonds)

#  information about 53,940 diamonds
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut))

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, color = cut))

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut))

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity))

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill") +
  ggtitle('Position = "fill"')

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge") +
  ggtitle('Position = "dodge"')
  
# Polar bar charts will look better if you also set the width parameter of geom_bar() to 1
# width parameter of geom_bar() to 1. This will ensure that no space appears between the bars.
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut), width = 1) + 
  coord_polar()

#
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = factor(1), fill = cut), width = 1) + 
  coord_polar(theta = "y")

# 
ggplot(data = diamonds) + 
geom_bar(mapping = aes(x = cut, fill = cut), width = 1) + 
coord_polar() + 
facet_wrap( ~ clarity)

# Changing the Default Order of Legend Labels and Stacking of Data
# https://learnr.wordpress.com/2010/03/23/ggplot2-changing-the-default-order-of-legend-labels-and-stacking-of-data/

# ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar()
# You notice that in the legend “Fair” is at the top and “Ideal” at the bottom. 
# But what if I would like to order the labels in the reverse order, so that “Ideal” would be at the top?
# The order of legend labels can be manipulated by reordering the factor levels of the cut variable mapped to fill aesthetic.

levels(diamonds$cut)
diamonds$cut <- factor(diamonds$cut, levels = rev(levels(diamonds$cut)))
levels(diamonds$cut)
ggplot(diamonds, aes(clarity, fill = cut)) + geom_bar()


# Changing Data Stacking Order
ggplot(diamonds, aes(clarity, fill = cut, order = -as.numeric(cut))) +
+     geom_bar()

diamonds$cut <- factor(diamonds$cut, levels = rev(levels(diamonds$cut)))
ggplot(diamonds, aes(clarity, fill = cut, order = -as.numeric(cut))) +
+     geom_bar()


# new - ggplot2 2.2.0
# https://www.r-bloggers.com/ggplot2-2-2-0/


# joyplot
library(ggjoy)
library(gridExtra)
data(iris)
View(iris)
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_joy()

# scale = 0.9, not quite touching
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_joy(scale = 0.9)

# scale = 1, exactly touching
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_joy(scale = 1)

# scale = 5, substantial overlap
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_joy(scale = 5)

#
ggplot(iris, aes(x = Sepal.Length, y = Species)) + 
  geom_joy(scale = 1) + facet_wrap(~Species)

#
ggplot(iris, aes(x = Sepal.Length, y = Species)) + 
  geom_joy() + theme_joy(grid = FALSE) +
  scale_x_continuous(expand = c(0.01, 0)) +
  scale_y_discrete(expand = c(0.01, 0))
  
#
 ggplot(diamonds, aes(x = price, y = cut, fill = cut)) + 
   geom_joy(scale = 4) + 
   scale_fill_cyclical(values = c("blue", "green"))
   
#
ggplot(diamonds, aes(x = price, y = cut, fill = cut)) + 
   geom_joy(scale = 4) + 
   scale_fill_cyclical(values = c("blue", "green"), guide = "legend")

# medical data에서 BMI에 따라 3등급으로 나눈 변수를 만든다. 변수 이름은 BMI1
# medical data에서 age에 따라 3등급으로 나눈 변수를 만든다. 변수 이름은 age1



#########################################################################
# http://zevross.com/blog/2014/08/04/beautiful-plotting-in-r-a-ggplot2-cheatsheet-3/
library(ggplot2)
nmmaps<-read.csv("~/Dropbox/Statlecture/lecture/Data/chicago-nmmaps.csv", as.is=T)
# string to date format
# ex) strDates <- c("01/05/1965", "08/16/1975")
# dates <- as.Date(strDates, "%m/%d/%Y")

nmmaps$date<-as.Date(nmmaps$date,"%m/%d/%y")
nmmaps<-nmmaps[nmmaps$date>as.Date("1996-12-31"),]
nmmaps$year<-substring(nmmaps$date,1,4)
head(nmmaps)


##########################################################################
data(mtcars)
mtcars


data(mtcars)

# ggplot2 examples
library(ggplot2) 

# create factors with value labels 
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
  	labels=c("3gears","4gears","5gears")) 
mtcars$am <- factor(mtcars$am,levels=c(0,1),
  	labels=c("Automatic","Manual")) 
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
   labels=c("4cyl","6cyl","8cyl")) 

# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5), 
   main="Distribution of Gas Milage", xlab="Miles Per Gallon", 
   ylab="Density")

# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am, 
   facets=gear~cyl, size=I(3),
   xlab="Horsepower", ylab="Miles per Gallon") 

# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"), 
   method="lm", formula=y~x, color=cyl, 
   main="Regression of MPG on Weight", 
   xlab="Weight", ylab="Miles per Gallon")

# Boxplots of mpg by number of gears 
# observations (points) are overlayed and jittered
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"), 
   fill=gear, main="Mileage by Gear Number",
   xlab="", ylab="Miles per Gallon")


###########################################################################
#########################practice with real data ##########################
###########################################################################
# http://tutorials.iq.harvard.edu/R/Rgraphics/Rgraphics.html
# Data from https://www.lincolninst.edu/subcenters/land-values/land-prices-by-state.asp
# 분기별로 계속 업데잇 됨

housing<-read.csv("~/Dropbox/Statlecture/lecture/Data/landdata-states-2016q1.csv") # 자신의 환경에 맞게 설정 
dim(housing)
str(housing)

housing$Year <- as.numeric(substr(housing$Date, 1, 4))
housing$Qrtr <- as.numeric(substr(housing$Date, 5, 5))
housing$Date <- housing$Year + housing$Qrtr/4
head(housing[1:5])

#### Scatter plot and marginal histogram
install.packages("gridExtra")

library(ggplot2)
library(gridExtra)

hist_top <- ggplot()+geom_histogram(aes(rnorm(100)))
empty <- ggplot()+geom_point(aes(1,1), colour="white")+
         theme(axis.ticks=element_blank(), 
               panel.background=element_blank(), 
               axis.text.x=element_blank(), axis.text.y=element_blank(),           
               axis.title.x=element_blank(), axis.title.y=element_blank())

scatter <- ggplot()+geom_point(aes(rnorm(100), rnorm(100)))
hist_right <- ggplot()+geom_histogram(aes(rnorm(100)))+coord_flip()

grid.arrange(hist_top, empty, scatter, hist_right, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))

## Draw a scatter plot with associated X and Y histograms, densitie and correlation
# http://www.sthda.com/english/wiki/ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page-r-software-and-data-visualization
# https://www.personality-project.org/r/html/scatter.hist.html
